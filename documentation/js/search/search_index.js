var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.794,1,3.077,2,1.471,3,0.533,4,0.458,5,0.458,6,3.352,7,0.649,8,0.039,9,0.976,10,2.639,11,3.352,12,0.533,13,0.026,14,3.352,15,1.804,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.867,2,1.471,3,0.391,4,0.337,5,0.337,7,0.7,8,0.039,9,0.718,10,2.638,11,2.463,12,0.391,13,0.019,16,0.026,17,0.026,18,1.671,19,3.604,20,1.326,21,1.326,22,1.647,23,1.647,24,1.326,25,2.546,26,1.647,27,2.463,28,2.463,29,2.463,30,2.638,31,2.948,32,2.373,33,2.24,34,1.647,35,1.474,36,2.992,37,2.523,38,2.992,39,2.992,40,2.992,41,2.992]],["title/injectables/AppService.html",[10,1.477,42,1.083]],["body/injectables/AppService.html",[3,0.512,4,0.44,5,0.44,7,0.512,8,0.038,9,0.938,10,2.387,12,0.512,13,0.025,16,0.031,17,0.031,42,1.751,43,2.154,44,3.221,45,0.841,46,2.387,47,5.499,48,1.155,49,3.912,50,1.928,51,1.751,52,1.928,53,3.912,54,2.765]],["title/controllers/AuthController.html",[0,1.083,55,1.858]],["body/controllers/AuthController.html",[0,1.407,2,1.407,3,0.509,4,0.438,5,0.438,7,0.632,8,0.039,9,0.934,12,0.509,13,0.025,15,1.725,16,0.031,17,0.031,55,2.994,56,3.205,57,2.752,58,4.83,59,2.327,60,3.205,61,3.893,62,2.143,63,2.413,64,2.413,65,2.143]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.553,3,0.425,4,0.366,5,0.366,7,0.671,8,0.039,9,0.779,12,0.425,13,0.021,16,0.028,17,0.028,18,1.742,20,1.439,21,1.439,22,1.787,23,1.787,24,1.439,25,2.653,26,2.653,30,2.756,32,1.905,33,2.366,34,1.787,35,1.6,37,2.013,55,2.987,59,2.61,60,2.673,66,2.673,67,2.673,68,2.673,69,3.247,70,2.665,71,3.247,72,2.673]],["title/injectables/AuthService.html",[42,1.083,59,1.329]],["body/injectables/AuthService.html",[3,0.365,4,0.315,5,0.315,7,0.508,8,0.039,9,0.67,12,0.365,13,0.018,15,1.238,16,0.025,17,0.025,42,1.403,43,1.538,45,0.601,46,1.913,48,1.317,50,1.913,51,2.038,52,1.913,59,1.72,62,2.137,63,1.732,64,1.732,65,1.538,70,1.732,73,2.3,74,2.887,75,3.969,76,4.461,77,2.3,78,2.151,79,2.794,80,2.137,81,2.137,82,1.146,83,1.913,84,2.794,85,2.794,86,3.882,87,3.673,88,2.456,89,2.794,90,1.975,91,2.3,92,2.3,93,1.376,94,2.3,95,2.3,96,2.137,97,2.794,98,2.794,99,1.732,100,2.794,101,2.794,102,2.794,103,2.3]],["title/classes/CreatePostDto.html",[13,0.019,104,1.65]],["body/classes/CreatePostDto.html",[3,0.162,4,0.139,5,0.139,7,0.492,8,0.039,12,0.162,13,0.017,16,0.013,17,0.013,45,0.266,48,1.328,51,1.826,54,1.464,82,1.527,83,2.329,103,2.864,104,1.14,105,0.548,106,3.266,107,0.874,108,1.184,109,3.097,110,2.672,111,2.672,112,3.45,113,2.672,114,2.672,115,3.478,116,1.888,117,3.478,118,3.289,119,1.993,120,3.478,121,2.137,122,3.237,123,1.237,124,1.237,125,2.071,126,2.071,127,3.45,128,1.237,129,1.237,130,1.937,131,1.237,132,2.572,133,1.705,134,1.705,135,2.071,136,1.237,137,1.237,138,1.237,139,2.071,140,2.175,141,2.572,142,3.762,143,1.284,144,1.705,145,1.237,146,1.237,147,3.125,148,2.199,149,2.071,150,2.071,151,1.237,152,1.237,153,2.071,154,2.071,155,2.672,156,2.071,157,2.071,158,2.071,159,2.071,160,1.237,161,1.237,162,1.237,163,1.237,164,0.874,165,3.125,166,1.237,167,3.125,168,3.125,169,1.705,170,2.071,171,2.071,172,2.071,173,2.071,174,2.071,175,1.237,176,2.864,177,1.705,178,1.705,179,1.705,180,1.237,181,1.237,182,2.071,183,1.237,184,1.237,185,3.125,186,1.237,187,1.237,188,1.237,189,1.237,190,2.672,191,1.237,192,2.071,193,2.071,194,2.156,195,3.289,196,2.459,197,2.071,198,1.018,199,1.018,200,2.071,201,0.609,202,1.237,203,1.237,204,0.874,205,0.767,206,1.464,207,1.237,208,2.459,209,3.995,210,0.609,211,1.237,212,2.071,213,1.018,214,1.237,215,1.237,216,1.237,217,1.237,218,1.237,219,1.237,220,1.237,221,1.237,222,1.018,223,1.018,224,1.888,225,1.018,226,1.237,227,1.237,228,1.464,229,1.018,230,1.237]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,130,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.466,4,0.401,5,0.401,7,0.466,8,0.038,12,0.466,13,0.03,16,0.03,17,0.03,45,0.767,48,1.349,51,1.651,82,1.349,105,1.58,106,3.563,108,2.024,119,2.024,121,2.234,130,2.832,194,3.296,196,3.229,201,1.756,206,3.563,224,3.563,228,3.563,231,2.934,232,3.564,233,3.564,234,3.564]],["title/classes/CreateUserDto.html",[13,0.019,235,1.65]],["body/classes/CreateUserDto.html",[3,0.353,4,0.304,5,0.304,7,0.353,8,0.038,12,0.353,13,0.025,16,0.025,17,0.025,45,0.581,48,1.402,51,1.965,82,1.402,87,3.606,90,3.096,105,1.196,108,1.68,119,2.105,169,3.12,194,2.944,195,3.12,196,3.357,198,2.223,199,2.223,201,1.33,223,3.12,235,2.086,236,4.119,237,1.908,238,3.606,239,4.38,240,2.7,241,2.7,242,2.7,243,2.7,244,2.7,245,2.7,246,2.7,247,4.75,248,3.79,249,3.79,250,3.79,251,3.79,252,3.79,253,3.79,254,5.187,255,3.79,256,2.086,257,3.79,258,3.79,259,2.7,260,3.79,261,2.7,262,3.79,263,2.7,264,2.7]],["title/classes/GetUsersParamDto.html",[13,0.019,265,1.858]],["body/classes/GetUsersParamDto.html",[3,0.45,4,0.388,5,0.388,7,0.649,8,0.039,12,0.45,13,0.032,16,0.029,17,0.029,45,0.74,48,1.016,82,1.464,88,2.993,93,2.2,96,2.459,105,1.525,108,1.979,119,1.525,122,2.769,140,1.525,164,2.433,201,1.696,204,2.433,208,3.157,210,1.696,256,2.729,265,2.769,266,3.677,267,2.834,268,4.466,269,3.442,270,3.442,271,3.677,272,3.442]],["title/classes/PatchPostDto.html",[13,0.019,273,1.858]],["body/classes/PatchPostDto.html",[3,0.448,4,0.386,5,0.386,7,0.647,8,0.039,12,0.448,13,0.029,16,0.029,17,0.029,45,0.737,48,1.012,82,1.012,88,2.989,104,1.887,105,1.519,107,2.422,108,1.974,119,1.519,121,1.974,140,1.519,164,2.422,194,2.761,201,1.688,205,2.124,208,3.148,210,1.688,256,2.452,271,3.667,273,2.761,274,3.667,275,3.667,276,4.454,277,4.454,278,3.427,279,3.427,280,2.821,281,2.821,282,2.821]],["title/classes/PatchUserDto.html",[13,0.019,283,1.858]],["body/classes/PatchUserDto.html",[3,0.533,4,0.458,5,0.458,7,0.649,8,0.038,12,0.533,13,0.026,16,0.032,17,0.032,105,1.804,205,2.524,235,2.241,237,2.878,275,4.087,280,3.352,283,3.077,284,3.352,285,4.964,286,3.352,287,3.352,288,3.352]],["title/controllers/PostsController.html",[0,1.083,289,1.858]],["body/controllers/PostsController.html",[0,0.732,2,0.732,3,0.265,4,0.228,5,0.228,7,0.582,8,0.039,9,0.486,12,0.265,13,0.013,15,0.897,16,0.02,17,0.02,45,0.435,46,1.513,48,1.096,50,1.828,51,1.341,52,1.513,57,1.431,62,1.114,63,1.255,64,1.255,65,1.114,74,2.883,80,2.043,81,2.043,82,1.096,83,1.828,104,2.58,116,2.171,119,1.644,121,2.223,127,3.41,140,1.836,210,0.997,273,2.905,281,2.528,282,2.528,289,1.904,290,1.667,291,4.452,292,3.071,293,3.071,294,3.071,295,2.025,296,3.071,297,3.071,298,2.171,299,3.071,300,4.142,301,4.142,302,3.071,303,2.025,304,2.025,305,3.071,306,2.025,307,3.666,308,2.025,309,2.025,310,2.528,311,2.528,312,3.41,313,2.025,314,2.025,315,1.667,316,1.667,317,2.528,318,1.828,319,1.667,320,3.055,321,3.055,322,1.667,323,1.667,324,1.667,325,2.025,326,2.025,327,2.025,328,1.667,329,1.667,330,2.025,331,2.025,332,2.025,333,2.528,334,2.528,335,2.025,336,2.025,337,2.025,338,2.025]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.579,3,0.435,4,0.375,5,0.375,7,0.677,8,0.038,9,0.798,12,0.435,13,0.022,16,0.028,17,0.028,18,1.763,20,1.475,21,1.475,22,1.832,23,1.832,24,1.475,25,2.685,26,1.832,31,3.143,32,2.447,33,2.405,34,1.832,35,1.639,37,2.708,72,2.739,289,3.024,318,2.72,319,2.739,339,2.739,340,3.328,341,2.739,342,3.328,343,3.328]],["title/injectables/PostsService.html",[42,1.083,318,1.477]],["body/injectables/PostsService.html",[3,0.384,4,0.331,5,0.331,7,0.526,8,0.039,9,0.704,12,0.384,13,0.019,15,1.302,16,0.026,17,0.026,42,1.452,43,1.617,45,0.632,46,1.98,48,1.187,50,1.447,51,1.655,52,1.447,62,2.212,63,1.821,64,2.491,65,1.617,74,2.521,77,2.418,78,2.129,80,2.212,81,2.212,82,1.187,83,1.98,92,2.418,93,1.98,96,2.931,99,1.821,109,4.054,118,3.308,307,2.418,318,1.98,344,2.418,345,3.308,346,2.937,347,4.018,348,2.937,349,2.418,350,2.937,351,4.054,352,4.018,353,4.018]],["title/controllers/UsersController.html",[0,1.083,354,1.858]],["body/controllers/UsersController.html",[0,0.522,2,0.522,3,0.189,4,0.163,5,0.163,7,0.531,8,0.039,9,0.346,12,0.189,13,0.009,14,1.189,15,0.64,16,0.015,17,0.015,45,0.311,46,1.16,48,1.015,50,2.198,51,1.367,52,1.999,57,1.021,74,2.727,78,1.191,80,1.891,81,2.234,82,1.317,83,1.693,88,2.083,93,2.52,96,2.612,99,0.895,116,1.021,119,1.523,121,1.798,122,2.13,133,2.829,134,2.829,140,1.798,143,2.766,205,1.459,210,0.712,229,1.938,235,2.234,256,2.917,265,2.13,283,2.515,288,1.938,298,2.429,311,1.938,312,1.938,315,1.189,316,1.189,317,3.673,320,2.453,321,1.938,322,1.189,323,1.189,324,1.189,328,1.938,329,1.938,333,1.938,334,1.938,354,1.459,355,1.189,356,2.354,357,2.354,358,2.98,359,2.354,360,1.444,361,1.444,362,1.444,363,1.444,364,3.436,365,2.354,366,1.444,367,2.354,368,1.444,369,2.354,370,1.938,371,2.354,372,2.98,373,2.354,374,1.444,375,1.444,376,3.436,377,2.354,378,1.444,379,2.829,380,2.354,381,2.354,382,2.354,383,2.98,384,1.444,385,2.354,386,2.354,387,1.444,388,1.444,389,1.444,390,2.98,391,1.444,392,2.98,393,1.444,394,1.444,395,1.189,396,1.444,397,1.444,398,1.189,399,1.444,400,1.444,401,1.444,402,1.444,403,1.444,404,1.444,405,1.444,406,1.444,407,1.444,408,1.444,409,1.444,410,1.189,411,1.444,412,1.444,413,1.444,414,1.444,415,2.354,416,1.444]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.553,3,0.425,4,0.366,5,0.366,7,0.671,8,0.039,9,0.779,12,0.425,13,0.021,16,0.028,17,0.028,18,1.742,20,1.439,21,1.439,22,1.787,23,1.787,24,1.439,25,2.653,26,2.653,30,2.118,32,2.479,33,2.366,34,1.787,35,1.6,37,2.013,70,2.665,78,2.355,354,2.987,395,2.673,417,2.673,418,2.673,419,2.673,420,3.247,421,3.247,422,3.247]],["title/injectables/UsersService.html",[42,1.083,78,1.199]],["body/injectables/UsersService.html",[3,0.309,4,0.266,5,0.266,7,0.451,8,0.039,9,0.567,12,0.309,13,0.015,15,1.048,16,0.022,17,0.022,42,1.246,43,1.302,45,0.509,46,1.699,48,1.201,50,1.699,51,1.47,52,1.699,59,2.27,62,1.898,65,1.302,70,1.466,74,2.732,75,2.838,78,1.379,80,2.24,81,2.24,82,1.201,83,2.005,88,2.461,90,2.876,91,1.947,93,1.699,94,1.947,96,1.302,99,1.466,132,1.947,143,2.522,238,3.35,256,2.732,345,2.838,349,3.681,370,1.947,379,1.947,423,1.947,424,3.448,425,2.365,426,2.365,427,3.448,428,2.365,429,3.448,430,3.448,431,3.448,432,3.448,433,2.365,434,3.448,435,2.365,436,2.365,437,2.365,438,2.365,439,3.448,440,3.448,441,3.448,442,3.448,443,2.365,444,2.365,445,3.448,446,3.448,447,2.365]],["title/coverage.html",[448,2.88]],["body/coverage.html",[0,1.766,1,1.788,5,0.325,6,2.375,8,0.038,10,1.421,13,0.034,16,0.026,17,0.026,24,1.278,42,1.766,44,2.375,55,1.788,56,2.375,59,1.278,73,2.375,78,1.153,82,0.852,93,1.421,104,1.588,106,2.805,107,2.805,121,1.278,130,1.788,206,2.039,225,2.375,231,2.375,235,1.588,236,2.375,237,2.805,265,1.788,266,2.375,267,2.375,273,1.788,274,2.375,283,1.788,284,2.375,289,1.788,290,2.375,298,2.039,318,1.421,344,2.375,354,1.788,355,2.375,423,2.375,448,2.039,449,2.375,450,2.884,451,5.779,452,4.887,453,4.537,454,2.884,455,2.375,456,2.884,457,3.969,458,2.884,459,2.884,460,2.884,461,2.884,462,2.884,463,2.884,464,2.884,465,2.884,466,2.884,467,2.884]],["title/dependencies.html",[21,1.596,468,2.068]],["body/dependencies.html",[8,0.039,9,0.934,13,0.031,16,0.031,17,0.031,21,1.725,201,1.918,204,2.752,210,1.918,286,3.205,287,3.205,469,3.893,470,3.893,471,5.25,472,3.893,473,3.893,474,3.893,475,3.893,476,3.893,477,3.893,478,3.893,479,3.893,480,3.893,481,3.893,482,3.893,483,3.893]],["title/miscellaneous/enumerations.html",[484,1.557,485,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.031,17,0.031,45,0.81,112,3.894,121,2.096,143,2.932,144,3.894,148,3.894,176,3.894,177,3.894,178,3.894,179,3.894,213,3.894,228,4.138,484,2.334,485,3.1,486,3.765,487,3.765,488,3.765,489,3.765]],["title/miscellaneous/functions.html",[484,1.557,490,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.478,45,0.969,455,3.71,484,2.793,490,3.71,491,4.506]],["title/index.html",[45,0.54,492,2.512,493,2.512]],["body/index.html",[4,0.22,8,0.036,16,0.019,17,0.019,35,2.278,54,3.507,95,3.806,122,2.522,140,0.867,141,1.61,222,1.61,224,1.382,310,1.61,351,2.462,398,3.806,410,1.61,448,1.382,449,2.462,494,1.955,495,1.955,496,3.632,497,2.991,498,1.955,499,1.955,500,1.955,501,1.955,502,2.991,503,3.632,504,1.955,505,1.955,506,4.068,507,1.955,508,4.962,509,1.955,510,4.811,511,1.955,512,1.955,513,1.955,514,2.991,515,1.955,516,2.991,517,1.955,518,3.632,519,1.955,520,1.955,521,1.955,522,1.955,523,1.955,524,1.955,525,4.068,526,2.991,527,1.955,528,1.955,529,1.955,530,1.955,531,2.991,532,4.068,533,1.955,534,2.991,535,1.955,536,1.955,537,2.991,538,4.623,539,4.068,540,1.955,541,2.991,542,1.955,543,1.955,544,1.955,545,1.955,546,4.068,547,1.955,548,1.955,549,1.955,550,1.955,551,2.991,552,1.955,553,1.955,554,1.955,555,1.955,556,1.955,557,2.991,558,1.955,559,1.955,560,1.955,561,2.991,562,1.955,563,1.955,564,3.349,565,2.991,566,1.955,567,1.955,568,1.955,569,1.955,570,1.955,571,1.955,572,1.955,573,1.955,574,2.991,575,1.955,576,1.955,577,1.955,578,1.955,579,3.632,580,1.955,581,1.955,582,1.955,583,1.955,584,1.955,585,1.955,586,2.991,587,1.955,588,1.955,589,1.955,590,1.955,591,2.991,592,1.955,593,1.955,594,1.955,595,2.991,596,2.991,597,1.955,598,1.955,599,1.955,600,1.955,601,1.955,602,1.955,603,1.955,604,1.955,605,1.955,606,1.955,607,1.61,608,1.955,609,1.955,610,1.955,611,1.955,612,1.955,613,1.955,614,1.61]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.603,20,1.861,30,2.069,31,2.312,32,1.861,564,4.639,615,5.634,616,5.634,617,5.634]],["title/overview.html",[618,3.355]],["body/overview.html",[2,1.11,8,0.038,10,2.309,16,0.027,17,0.027,18,1.11,19,3.561,20,1.362,21,1.362,22,1.691,23,1.691,24,1.362,25,1.691,26,1.691,27,2.529,28,2.529,29,2.529,30,2.659,31,3.036,32,2.445,33,2.281,34,1.691,35,1.514,43,1.691,59,2.445,66,2.529,67,2.529,68,2.529,78,2.206,105,1.362,318,2.309,339,2.529,341,2.529,417,2.529,418,2.529,419,2.529,618,2.529,619,4.687,620,3.072]],["title/properties.html",[108,1.596,468,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,108,1.964,140,1.964,607,3.648,614,3.648,621,4.432,622,4.432,623,4.432]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":622,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":458,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.26",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["10})@apiquery({name",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["11.0.3",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":272,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isint()@type(undefined",{"_index":269,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.1.0",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":619,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":620,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["80",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":552,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":601,"title":{},"body":{"index.html":{}}}],["api",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiquery({name",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":502,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["atleast",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":607,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":541,"title":{},"body":{"index.html":{}}}],["backers",{"_index":602,"title":{},"body":{"index.html":{}}}],["based",{"_index":536,"title":{},"body":{"index.html":{}}}],["blog",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":594,"title":{},"body":{"index.html":{}}}],["body",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":617,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":615,"title":{},"body":{"modules.html":{}}}],["building",{"_index":497,"title":{},"body":{"index.html":{}}}],["channel",{"_index":567,"title":{},"body":{"index.html":{}}}],["charachters",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["character",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":551,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":535,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":339,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":340,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":341,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":418,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":419,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coded",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["come",{"_index":558,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["console.log('is",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createpostdto",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(patchpostdto",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["courses",{"_index":573,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":448,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":104,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":130,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":235,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":569,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["demo",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":525,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":540,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":531,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":550,"title":{},"body":{"index.html":{}}}],["description",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":511,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":581,"title":{},"body":{"index.html":{}}}],["discord",{"_index":566,"title":{},"body":{"index.html":{}}}],["dive",{"_index":568,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":449,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/create",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":520,"title":{},"body":{"index.html":{}}}],["each",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":498,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":530,"title":{},"body":{"index.html":{}}}],["email",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":528,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":585,"title":{},"body":{"index.html":{}}}],["entries",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":485,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["exists",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":571,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":275,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":544,"title":{},"body":{"index.html":{}}}],["featured",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":554,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":546,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filters",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["find",{"_index":349,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":345,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(limit",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":347,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":553,"title":{},"body":{"index.html":{}}}],["follow",{"_index":588,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":496,"title":{},"body":{"index.html":{}}}],["full",{"_index":584,"title":{},"body":{"index.html":{}}}],["function",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":490,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":549,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(['/','/:userid",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallposts",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":492,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@param",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(getuserparamdto",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto.id",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamdto.id.tostring",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserposts",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["getuserposts(@param('userid",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["getuserposts(userid",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["getusers",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(limit",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":265,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":576,"title":{},"body":{"index.html":{}}}],["grow",{"_index":598,"title":{},"body":{"index.html":{}}}],["hands",{"_index":570,"title":{},"body":{"index.html":{}}}],["handy",{"_index":559,"title":{},"body":{"index.html":{}}}],["hard",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":574,"title":{},"body":{"index.html":{}}}],["here",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":611,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":533,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":556,"title":{},"body":{"index.html":{}}}],["inject",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["install",{"_index":548,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":509,"title":{},"body":{"index.html":{}}}],["interact",{"_index":577,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isstring()@isnotempty",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":271,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["isoptional()@isjson",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":232,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":591,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":593,"title":{},"body":{"index.html":{}}}],["john",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":604,"title":{},"body":{"index.html":{}}}],["json",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":608,"title":{},"body":{"index.html":{}}}],["key",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":562,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lettres",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":614,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":596,"title":{},"body":{"index.html":{}}}],["limit",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":590,"title":{},"body":{"index.html":{}}}],["list",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":534,"title":{},"body":{"index.html":{}}}],["loop",{"_index":587,"title":{},"body":{"index.html":{}}}],["makes",{"_index":542,"title":{},"body":{"index.html":{}}}],["managing",{"_index":555,"title":{},"body":{"index.html":{}}}],["matches",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":538,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":484,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":595,"title":{},"body":{"index.html":{}}}],["mode",{"_index":514,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":532,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":609,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":582,"title":{},"body":{"index.html":{}}}],["needed",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["needs",{"_index":277,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":503,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":613,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":286,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":495,"title":{},"body":{"index.html":{}}}],["npm",{"_index":508,"title":{},"body":{"index.html":{}}}],["number",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numeric",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["object",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":592,"title":{},"body":{"index.html":{}}}],["official",{"_index":539,"title":{},"body":{"index.html":{}}}],["one",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":597,"title":{},"body":{"index.html":{}}}],["option",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":231,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":233,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":234,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":618,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":468,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":267,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:12",{"_index":270,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":583,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":280,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":276,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":285,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":273,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":283,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["person",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["platform",{"_index":537,"title":{},"body":{"index.html":{}}}],["please",{"_index":565,"title":{},"body":{"index.html":{}}}],["possible",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":279,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:110",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:24",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:35",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:43",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:51",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:75",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":343,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":289,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":318,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":516,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":494,"title":{},"body":{"index.html":{}}}],["project",{"_index":506,"title":{},"body":{"index.html":{}}}],["properties",{"_index":108,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":563,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":605,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":524,"title":{},"body":{"index.html":{}}}],["real",{"_index":578,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":505,"title":{},"body":{"index.html":{}}}],["request",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":545,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":557,"title":{},"body":{"index.html":{}}}],["response",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["returning",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":510,"title":{},"body":{"index.html":{}}}],["runs",{"_index":529,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":499,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["serialize",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":500,"title":{},"body":{"index.html":{}}}],["service",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["setup",{"_index":507,"title":{},"body":{"index.html":{}}}],["side",{"_index":501,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":547,"title":{},"body":{"index.html":{}}}],["single",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["slug",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":268,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":600,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":486,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":487,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":422,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:13",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:21",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":274,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":488,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":489,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:26",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:38",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:50",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":342,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":344,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:12",{"_index":348,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":346,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":266,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":284,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:16",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:36",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:7",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:42",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":420,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":512,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":515,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":517,"title":{},"body":{"index.html":{}}}],["started",{"_index":493,"title":{"index.html":{}},"body":{}}],["starter",{"_index":504,"title":{},"body":{"index.html":{}}}],["statements",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":586,"title":{},"body":{"index.html":{}}}],["steps",{"_index":526,"title":{},"body":{"index.html":{}}}],["story",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":543,"title":{},"body":{"index.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":564,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":616,"title":{},"body":{"modules.html":{}}}],["table",{"_index":467,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":466,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":527,"title":{},"body":{"index.html":{}}}],["test",{"_index":351,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":522,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":521,"title":{},"body":{"index.html":{}}}],["tests",{"_index":518,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":599,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(limit",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":350,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findonebyid(useridasstring",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["thrown",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tile",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":579,"title":{},"body":{"index.html":{}}}],["title",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":606,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":612,"title":{},"body":{"index.html":{}}}],["type",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":287,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["typescript\"]'})@isoptional()@isarray()@isstring({each",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":519,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":623,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":282,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":278,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user(s",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":288,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["useridasstring",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["users",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":421,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/:id",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":354,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":78,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":580,"title":{},"body":{"index.html":{}}}],["validate",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["validatenested",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":621,"title":{},"body":{"properties.html":{}}}],["video",{"_index":572,"title":{},"body":{"index.html":{}}}],["visit",{"_index":561,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":575,"title":{},"body":{"index.html":{}}}],["void",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":513,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["website",{"_index":610,"title":{},"body":{"index.html":{}}}],["without",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":560,"title":{},"body":{"index.html":{}}}],["x",{"_index":589,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":603,"title":{},"body":{"index.html":{}}}],["you're",{"_index":523,"title":{},"body":{"index.html":{}}}],["z0",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello From NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(\n        /**\n         * Injecting Auth Service\n         */\n        private readonly authService: AuthService,\n    ){}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        /**\n         * Injecting Users Service\n         */\n        @Inject(forwardRef(() => UsersService))\n        private readonly usersService: UsersService,\n    ){}\n    public login(email: string, password: string, id: string) {\n        //Check user exists database\n        const user = this.usersService.findOneById('1234')\n        //login\n        //Token\n        return 'Sample_Token'\n    }\n\n    public isAuth() {\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values: 'post', 'page', 'story', 'series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small lettres and use only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible Values: 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: '[\"nestjs\",  \"typescript\"]'})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MinLength, ValidateNested } from \"class-validator\";\nimport { postStatus } from \"../enums/postStatus.enum\";\nimport { postType } from \"../enums/postType.enum\";\nimport { Type } from \"class-transformer\";\nimport { CreatePostMetaOptionsDto } from \"./create-post-meta-options.dto\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: 'This is a title',\n        description: 'This is the title for the blog post',\n    })\n    @IsString()\n    @MinLength(4)\n    @IsNotEmpty()\n    title: string;\n\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values: 'post', 'page', 'story', 'series'\"\n    })\n    @IsEnum(postType)\n    @IsNotEmpty()\n    postType: postType;\n\n    @ApiProperty({\n        description: \"For Example - 'my-url\",\n        example: \"my-blog-post\",\n    })\n    @IsString()\n    @IsNotEmpty()\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small lettres and use only \"-\" and without spaces. For example \"my-url\"'\n    })\n    slug: string;\n\n    @ApiProperty({\n        enum: postStatus,\n        description: \"Possible Values: 'draft', 'scheduled', 'review', 'published'\"\n    })\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    status: postStatus;\n\n    @ApiPropertyOptional({\n        description: 'This is the content of the post',\n        example: 'The post content',\n    })\n    @IsString()\n    @IsOptional()\n    content?: string;\n\n    @ApiPropertyOptional({\n        description: 'Serialize your JSON object else a validation error will be thrown',\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n }\"\n    })\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional({\n        description: 'Featured image for your blog post',\n        example: 'http://localhost.com/images/image1.jpg',\n    })\n    @IsOptional()\n    @IsUrl()\n    featuredImageUrl?: string;\n\n    @ApiPropertyOptional({\n        description: 'The date on which the blog post is published',\n        example: '2024-03-16T07:46:32+0000',\n    })\n    @IsISO8601()\n    @IsOptional()\n    publishOn?: Date;\n\n    @ApiPropertyOptional({\n        description: 'Array of tags passed as string values',\n        example: '[\"nestjs\",  \"typescript\"]',\n    })\n    @IsOptional()\n    @IsArray()\n    @IsString({ each: true})\n    @MinLength(3, { each: true })\n    tags?: string[];\n\n    @ApiPropertyOptional({\n        type: 'array',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                key: {\n                    type: 'string',\n                    description: 'The key can be any string identifier for you meta option',\n                    example: 'sidebarEnabled'\n                },\n                value: {\n                    type: 'any',\n                    description: 'Any value that you want to save to the key',\n                    example: 'true'\n                }\n            }\n        }\n    })\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsString()\n    @IsNotEmpty()\n    key: string;\n\n    @IsNotEmpty()\n    value: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum 8 charachters, atleast one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from 'class-validator'\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName: string;\n\n    @IsEmail()\n    @IsString()\n    @IsNotEmpty()\n    email: string;\n\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Minimum 8 charachters, atleast one letter, one number and one special character'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get user with a specific id', example: 1234})@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiProperty({\n        description: \"Get user with a specific id\",\n        example: 1234,\n    })\n    @IsInt()\n    @Type(()=> Number)\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: 'The ID of the post that needs to be updated',\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getUserPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getUserPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(['/', '/:userId'])\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:26\n                        \n                    \n\n\n            \n                \n                        Get posts by userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /**\n     * Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  // @Get()\n  // public getAllPosts() {\n  //   return 'You sent a Posts get request';\n  // }\n\n  /**\n   * Get posts by userId\n   */\n  @Get(['/','/:userId'])\n  public getUserPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId)\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description:  'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto)\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n    controllers: [PostsController],\n    providers: [PostsService],\n    imports: [UsersModule],\n})\n\nexport class PostsModule{}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UsersService } from \"src/users/providers/users.service\";\n\n@Injectable()\nexport class PostsService{\n    constructor(\n        /**\n         * Injecting Users Service\n         */\n        private readonly usersService: UsersService,\n    ){}\n    public findAll(userId: string) {\n        //Users Service\n        //Find A User\n        const user = this.usersService.findOneById(userId)\n\n        return[\n            {\n                user: user,\n                title: 'Test Tile',\n                content: 'Test Content',\n            },\n            {\n                user: user,\n                title: 'Test Tile 2',\n                content: 'Test Content 2',\n            }\n        ]\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        POST /users -> Create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(getUserParamDto: GetUsersParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Fetches a user by numeric ID'})@ApiResponse({status: 200, description: 'User fetched successfully by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        GET /users/:id -> Returns a single user\nWe validate id as a number, then convert it to a string\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Page number you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        GET /users -> Returns a list of users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n                        PATCH /users -> Patch an existing user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * GET /users -> Returns a list of users\n   */\n  @Get()\n  @ApiOperation({ summary: 'Fetches a list of registered users on the application' })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Page number you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(limit, page);\n  }\n\n  /**\n   * GET /users/:id -> Returns a single user\n   * We validate `id` as a number, then convert it to a string\n   */\n  @Get('/:id')\n  @ApiOperation({ summary: 'Fetches a user by numeric ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'User fetched successfully by ID',\n  })\n  public getUser(@Param() getUserParamDto: GetUsersParamDto) {\n    // Because of the DTO, `getUserParamDto.id` is a number.\n    // We'll convert it to a string here:\n    const userIdAsString = getUserParamDto.id.toString();\n    return this.usersService.findOneById(userIdAsString);\n  }\n\n  /**\n   * POST /users -> Create a new user\n   */\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return 'You sent a POST request to the /users endpoint';\n  }\n\n  /**\n   * PATCH /users -> Patch an existing user\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return 'You sent a PATCH request to the /users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:16\n                        \n                    \n\n\n            \n                \n                        Find all users (with pagination or other filters as needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Find user(s) by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Find all users (with pagination or other filters as needed)\n   */\n  public findAll(limit: number, page: number) {\n    const isAuth = this.authService.isAuth();\n    console.log('Is Authenticated?', isAuth);\n\n    // Hard-coded demo data\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Find user(s) by ID\n   */\n  public findOneById(id: string) {\n    // Hard-coded demo data returning a single user in an array\n    return [\n      {\n        id,\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.0.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
